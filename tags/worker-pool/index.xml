<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Worker Pool on Santekno</title><link>https://santekno.com/tags/worker-pool/</link><description>Recent content in Worker Pool on Santekno</description><generator>Hugo -- gohugo.io</generator><language>id</language><lastBuildDate>Fri, 23 Apr 2021 13:48:56 +0700</lastBuildDate><atom:link href="https://santekno.com/tags/worker-pool/index.xml" rel="self" type="application/rss+xml"/><item><title>Implementasi Concurrency Worker Pool Golang</title><link>https://santekno.com/implementasi-concurrency-worker-pool-golang/</link><pubDate>Fri, 23 Apr 2021 13:48:56 +0700</pubDate><guid>https://santekno.com/implementasi-concurrency-worker-pool-golang/</guid><description>Pengertian Dasar Worker pool adalah teknik manajemen goroutine dalam concurrent programming pada Go. Sejumlah worker dijalankan dan masing-masing memiliki tugas yang sama yaitu menyelesaikan sejumlah jobs. Dengan metode worker pool ini, maka penggunaan memory dan performansi program akan bisa optimal.
Implementasi Program output:
&amp;gt; Send Job: 0 -&amp;gt; Send Job: 1 -&amp;gt; Send Job: 2 -&amp;gt; Send Job: 3 -&amp;gt; Send Job: 4 -&amp;gt; Send Job: 5 &amp;lt;- receive job : 0 &amp;lt;- receive job : 4 -&amp;gt; Send Job: 6 -&amp;gt; Send Job: 7 &amp;lt;- receive job : 5 -&amp;gt; Send Job: 8 &amp;lt;- receive job : 2 &amp;lt;- receive job : 3 -&amp;gt; Send Job: 9 -&amp;gt; Send Job: 10 &amp;lt;- receive job : 1 &amp;lt;- receive job : 9 ^Csignal: interrupt Pembahasan Pada contoh program diatas kita akan melakukan cetak suatu nilai yang di-input.</description></item></channel></rss>